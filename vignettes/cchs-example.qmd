---
title: "How to: Generate CCHS mock data"
author: "MockData Team"
date: 2025-10-30
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
editor: visual
---
```{r}
#| label: setup
#| include: false
devtools::load_all("../", quiet = TRUE)
```

## Prerequisites

- Complete the [Getting started](getting-started.html) tutorial
- Familiar with CCHS (Canadian Community Health Survey) structure

See the [User guide](user-guide.html) for detailed feature documentation.

## CCHS-specific considerations

The Canadian Community Health Survey has several unique characteristics:

- **Multiple cycles:** CCHS has many cycles (e.g., CCHS_2001, CCHS_2003, CCHS_2005)
- **Variable evolution:** Raw variable names change across cycles
- **Derived variables:** Many CCHS variables are calculated (e.g., HWTGBMI_der)
- **Large metadata:** Hundreds of variables per cycle

MockData includes sample CCHS metadata extracted from cchsflow for testing.

## Load CCHS metadata

```{r}
#| warning: false
#| message: false
#| output: false

library(dplyr)
library(stringr)
```

```{r}
# Load sample CCHS metadata from package
variables <- read.csv(
  "../inst/extdata/cchs/cchsflow_sample_variables.csv",
  header = TRUE,
  check.names = FALSE,
  na.strings = c("", "NA", "N/A"),
  stringsAsFactors = FALSE
)

variable_details <- read.csv(
  "../inst/extdata/cchs/cchsflow_sample_variable_details.csv",
  header = TRUE,
  check.names = FALSE,
  na.strings = c("", "NA", "N/A"),
  stringsAsFactors = FALSE
)

cat("Loaded metadata:\n")
cat("- Variables:", nrow(variables), "rows\n")
cat("- Variable details:", nrow(variable_details), "rows\n")
```

## Explore available cycles

```{r}
# Extract unique CCHS cycles from metadata
cycles <- sort(unique(unlist(str_split(paste(variables$databaseStart, collapse = ","), ","))))
cycles <- str_trim(cycles[str_detect(cycles, "cchs")])

cat("Available CCHS cycles in sample metadata:\n")
print(cycles)

# Choose first cycle for this example
target_cycle <- cycles[1]
cat("\nGenerating mock data for:", target_cycle, "\n")
```

## Identify raw variables to generate

CCHS harmonization works with **raw variables** (before harmonization). Use helper functions to identify which raw variables exist in a cycle:

```{r}
# Get raw variables for target cycle (exclude derived variables)
raw_vars <- get_raw_variables(
  target_cycle,
  variables,
  variable_details,
  include_derived = FALSE
)

cat("Raw variables to generate:", nrow(raw_vars), "\n\n")

# Separate by type
raw_cat <- raw_vars[raw_vars$variableType == "Categorical", ]
raw_con <- raw_vars[raw_vars$variableType == "Continuous", ]

cat("Breakdown:\n")
cat("- Categorical:", nrow(raw_cat), "variables\n")
cat("- Continuous:", nrow(raw_con), "variables\n\n")

cat("Sample variables:\n")
print(head(raw_vars[, c("variable_raw", "variableType")], 10))
```

## Generate categorical variables

```{r}
# Configuration
n_records <- 100
set.seed(12345)

# Initialize data frame
df_mock <- data.frame(id = 1:n_records)

# Generate each categorical variable
cat("Generating", nrow(raw_cat), "categorical variables:\n\n")

for (i in 1:nrow(raw_cat)) {
  var_raw <- raw_cat$variable_raw[i]
  cat("Generating:", var_raw, "\n")

  col <- create_cat_var(
    var_raw = var_raw,
    cycle = target_cycle,
    variable_details = variable_details,
    variables = variables,
    length = nrow(df_mock),
    df_mock = df_mock,
    prop_NA = 0.05  # Realistic 5% missingness
  )

  if (!is.null(col)) {
    df_mock <- cbind(df_mock, col)
  }
}

cat("\nCategorical generation complete. Columns:", ncol(df_mock), "\n")
```

## Generate continuous variables

```{r}
# Generate each continuous variable
cat("\nGenerating", nrow(raw_con), "continuous variables:\n\n")

for (i in 1:nrow(raw_con)) {
  var_raw <- raw_con$variable_raw[i]
  cat("Generating:", var_raw, "\n")

  col <- create_con_var(
    var_raw = var_raw,
    cycle = target_cycle,
    variable_details = variable_details,
    variables = variables,
    length = nrow(df_mock),
    df_mock = df_mock,
    distribution = "uniform",
    prop_NA = 0.03  # Lower missingness for continuous measures
  )

  if (!is.null(col)) {
    df_mock <- cbind(df_mock, col)
  }
}

cat("\nContinuous generation complete. Columns:", ncol(df_mock), "\n")
```

## Verify results

```{r}
# Show structure
cat("\nMock CCHS data structure:\n")
cat("- Records:", nrow(df_mock), "\n")
cat("- Variables:", ncol(df_mock), "\n\n")

# Display first rows
cat("First 10 rows:\n")
print(head(df_mock, 10))

# Check missing data
cat("\nMissing value counts:\n")
na_counts <- colSums(is.na(df_mock))
if (any(na_counts > 0)) {
  print(na_counts[na_counts > 0])
  cat("\nMissingness rates:\n")
  print(round(na_counts[na_counts > 0] / nrow(df_mock) * 100, 1))
} else {
  cat("No missing values\n")
}
```

## CCHS-specific tips

### Working with multiple cycles

Generate data for multiple cycles to test harmonization:

```{r}
# Generate for first 3 cycles
cycle_list <- cycles[1:min(3, length(cycles))]

all_cycles_data <- lapply(cycle_list, function(cyc) {
  cat("\nGenerating for:", cyc, "\n")

  raw_vars <- get_raw_variables(cyc, variables, variable_details,
                                 include_derived = FALSE)

  df <- data.frame(id = 1:50, cycle = cyc)

  # Generate variables (simplified loop)
  for (i in 1:nrow(raw_vars)) {
    var_raw <- raw_vars$variable_raw[i]
    var_type <- raw_vars$variableType[i]

    if (var_type == "Categorical") {
      col <- create_cat_var(var_raw, cyc, variable_details, variables,
                           length = nrow(df), df_mock = df, prop_NA = 0.05)
    } else {
      col <- create_con_var(var_raw, cyc, variable_details, variables,
                           length = nrow(df), df_mock = df, prop_NA = 0.03)
    }

    if (!is.null(col)) {
      df <- cbind(df, col)
    }
  }

  return(df)
})

# Combine all cycles
combined_data <- bind_rows(all_cycles_data)

cat("\nCombined multi-cycle dataset:\n")
cat("- Total records:", nrow(combined_data), "\n")
cat("- Cycles:", paste(unique(combined_data$cycle), collapse = ", "), "\n")
```

### Handling derived variables

Some CCHS variables are derived (calculated from other variables). The sample metadata excludes these, but if you need them:

```{r}
# Include derived variables
all_vars <- get_raw_variables(
  target_cycle,
  variables,
  variable_details,
  include_derived = TRUE
)

derived_vars <- all_vars[grepl("_der$|_cont$", all_vars$variable_raw), ]

if (nrow(derived_vars) > 0) {
  cat("Derived variables found:\n")
  print(derived_vars[, c("variable_raw", "variableType")])
  cat("\nNote: Derived variables generate independently, not calculated from components\n")
} else {
  cat("No derived variables in this sample metadata\n")
}
```

### Realistic distributions for common CCHS variables

For more realistic mock data with weighted distributions, this feature is coming in v0.3.0:

```{r}
# Example: Generate smoking variable
# (Currently uses uniform distribution - weighted distributions coming soon)

# Check if smoking variable exists
if ("SMKDSTY" %in% raw_cat$variable_raw) {
  df_test <- data.frame(id = 1:1000)

  col <- create_cat_var(
    var_raw = "SMKDSTY",
    cycle = target_cycle,
    variable_details = variable_details,
    variables = variables,
    length = 1000,
    df_mock = df_test,
    prop_NA = 0.05
  )

  if (!is.null(col)) {
    df_test <- cbind(df_test, col)
    cat("Smoking distribution (uniform):\n")
    print(table(df_test$SMKDSTY) / nrow(df_test))
  }
}
```

## Troubleshooting

**Issue: Variable not found**
- Check that variable exists in the target cycle using `get_raw_variables()`
- Verify variable names match between `variables` and `variable_details`

**Issue: Empty categories**
- Some CCHS variables have complex recode rules
- Check `variable_details` for the variable to see available categories

**Issue: Unexpected variable names**
- CCHS raw variable names change across cycles (e.g., SMK_05, SMKDSTY)
- Use `get_raw_variables()` to see actual names per cycle

## Next steps

- **Other databases:** Try [CHMS example](chms-example.html) or [DemPoRT example](demport-example.html)
- **Feature details:** Read [User guide](user-guide.html) for missing data, distributions, etc.
- **Technical depth:** See [Advanced topics](advanced-topics.html) for NA handling internals
