---
title: "Create mock data for DemPoRT"
author: "Juan Li"
date: 2025-07-30
format: 
  html:
    toc: true
    html-math-method: katex
    css: styles.css
editor: visual
---

Some resources:

<https://kgoldfeld.github.io/simstudy/>

```{r}
#| warning: false
#| message: false

library(dplyr)       # Data manipulation
library(stringr)     # Working with strings

# Load MockData package functions
devtools::load_all("../", quiet = TRUE)

```

## Read in variable and variable_details sheet

```{r}
# DemPoRT variables (use relative path for vignette building)
variables <- read.csv(
  "../inst/extdata/demport/variables_DemPoRT.csv",
  header = TRUE,
  check.names = FALSE,
  na.strings = c("", "NA", "N/A"),
  stringsAsFactors = FALSE
)

# DemPoRT variable details
variable_details <- read.csv(
  "../inst/extdata/demport/variable_details_DemPoRT.csv",
  header = TRUE,
  check.names = FALSE,
  na.strings = c("", "NA", "N/A"),
  stringsAsFactors = FALSE
)
```

## Get required cycles

```{r}
cycles <- unlist(str_split(paste(variables$databaseStart, collapse = ","), ","))
cycles <- unlist(str_split(cycles, " ")) 
cycles <- str_trim(cycles[str_detect(cycles, "cchs")]) # trim whitespaces
(cycles <- sort(unique(cycles)))

# NOTE: clean cycles
cycles <- sort(unique(str_replace_all(cycles, "cchs_", "cchs")))
cycles
```

## Get variable names of each type

```{r}
# check if variables and variable_details sheets match
var1 <- variables$variable
var2 <- unique(variable_details$variable)

print("In variables, not in variable_details:")
var1[!(var1 %in% var2)]
print("In variable_details, not in variables:")
var2[!(var2 %in% var1)]
```

```{r}
# --- derived variables ---
var_derived <- unique(c(variables[str_detect(variables$variableStart, "DerivedVar::") |
                          str_detect(variables$variable, "_der"), "variable"],
                        variable_details[str_detect(variable_details$variableStart, "DerivedVar::") |
                          str_detect(variable_details$variable, "_der"), "variable"]))
print("--- Derived variables: ---")
print(var_derived)

# --- original variables ---
# categorical variables
var_cat <- unique(c(variables[variables$variableType == "Categorical", "variable"],
                    variable_details[variable_details$variableType == "Categorical", "variable"]))
var_cat <- var_cat[!(var_cat %in% var_derived)] # remove derived variable
print("--- Categorical variables: ---")
print(var_cat)

# continuous variables
var_con <- unique(c(variables[variables$variableType == "Continuous", "variable"],
                    variable_details[variable_details$variableType == "Continuous", "variable"]))
var_con <- var_con[!(var_con %in% var_derived)] # remove derived variable
print("--- Continuous variables: ---")
print(var_con)

# check
nrow(variables) == length(var_derived) + length(var_cat) + length(var_con)
```

## 1. Generate mock data of original variables

### Categorical variables

```{r}
length <- 5

df_cat <- data.frame()
for (cycle in cycles) {
  df_i <- data.frame(cycle = rep(cycle, length))
  for (var in var_cat) {
    # Note: Using new function signature from mockdata-generators.R
    col <- create_cat_var(
      var_raw = var,
      cycle = cycle,
      variable_details = variable_details,
      variables = variables,
      length = length,
      df_mock = df_i
    )
    if (!is.null(col)) {
      df_i <- bind_cols(df_i, col)
    }
  }
  df_cat <- bind_rows(df_cat, df_i)
}
```

### Continuous variables

```{r}
df_con <- data.frame()
for (cycle in cycles) {
  df_i <- data.frame(cycle = rep(cycle, length))
  for (var in var_con) {
    # Note: Using new function signature from mockdata-generators.R
    # Catch warnings
    tryCatch({
      col <- create_con_var(
        var_raw = var,
        cycle = cycle,
        variable_details = variable_details,
        variables = variables,
        length = length,
        df_mock = df_i,
        distribution = "uniform"
      )
    }, warning = function(w) print(paste0(var, " in ", cycle)))

    # Run again to actually get the result (workaround for tryCatch behavior)
    col <- create_con_var(
      var_raw = var,
      cycle = cycle,
      variable_details = variable_details,
      variables = variables,
      length = length,
      df_mock = df_i,
      distribution = "uniform"
    )
    if (!is.null(col)) {
      df_i <- bind_cols(df_i, col)
    }
  }
  df_con <- bind_rows(df_con, df_i)
}
```

### Combine categorical and continuous data

```{r}
df <- bind_cols(df_cat, df_con[, !(names(df_con) %in% names(df_cat))])

# Show structure of combined data
cat("Combined mock data dimensions:", nrow(df), "rows Ã—", ncol(df), "columns\n")
cat("\nFirst few rows:\n")
print(head(df, 3))

# Optionally save to file (commented out for vignette)
# write.csv(df, "mock_all_cycles.csv", row.names = FALSE)
```

### Examine data by cycle

```{r}
# Show summary for each cycle
for (cycle in cycles) {
  dfi <- df %>% filter(cycle == !!cycle)
  nNA <- colSums(is.na(dfi))
  cols_without_na <- names(dfi)[nNA == 0]

  cat("\n=== Cycle:", cycle, "===\n")
  cat("Rows:", nrow(dfi), "\n")
  cat("Columns without NA:", length(cols_without_na), "\n")

  # Optionally save per-cycle files (commented out for vignette)
  # write.csv(dfi, paste0("mock_", cycle, ".csv"), row.names = FALSE)
}
```

## Generate outcome data

This section demonstrates generating mortality outcome data for survival analysis. DemPoRT requires date variables for time-to-event analysis.

**Note**: For comprehensive coverage of date variable generation including:

- Multiple distribution types (uniform, Gompertz, exponential)
- Handling invalid dates for testing
- Survival analysis workflows

See the [Date variables and temporal data](dates.html) vignette.

### Example: Generate death dates

```{r}
#| eval: false

# Example of adding death dates to the mock data
# This would use create_date_var() with Gompertz distribution
# for realistic mortality patterns

# death_dates <- create_date_var(
#   var_raw = "death_date",
#   cycle = "ices",
#   variable_details = variable_details,
#   length = nrow(df),
#   df_mock = df,
#   distribution = "gompertz",  # Realistic mortality pattern
#   seed = 200
# )
#
# df_with_dates <- cbind(df, death_dates)
```

For a complete survival analysis workflow with DemPoRT, see the dates vignette which covers:

- Generating paired entry and event dates
- Distribution selection for different event types
- Calculating time-to-event variables
- Handling censoring