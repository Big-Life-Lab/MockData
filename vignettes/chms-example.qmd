---
title: "How to: Generate CHMS mock data"
author: "MockData Team"
date: 2025-10-30
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
editor: visual
---
```{r}
#| label: setup
#| include: false
devtools::load_all("../", quiet = TRUE)
```

## Prerequisites

- Complete the [Getting started](getting-started.html) tutorial
- Familiar with CHMS (Canadian Health Measures Survey) structure

See the [User guide](user-guide.html) for detailed feature documentation.

## CHMS-specific considerations

The Canadian Health Measures Survey has unique characteristics:

- **Restricted access:** CHMS data only exists in secure environments (StatsCan RDCs)
- **Physical measures:** Unlike CCHS, CHMS includes biomarker and physical measurement data
- **Multiple cycles:** CHMS Cycle 1, Cycle 2, Cycle 3, etc.
- **Smaller sample sizes:** CHMS has ~5,000-6,000 participants per cycle (vs CCHS ~65,000+)

MockData helps develop and test chmsflow workflows without RDC access.

## Load CHMS metadata

```{r}
#| warning: false
#| message: false
#| output: false

library(dplyr)
library(stringr)
```

```{r}
# Load sample CHMS metadata from package
variables <- read.csv(
  "../inst/extdata/chms/chmsflow_sample_variables.csv",
  header = TRUE,
  check.names = FALSE,
  na.strings = c("", "NA", "N/A"),
  stringsAsFactors = FALSE
)

variable_details <- read.csv(
  "../inst/extdata/chms/chmsflow_sample_variable_details.csv",
  header = TRUE,
  check.names = FALSE,
  na.strings = c("", "NA", "N/A"),
  stringsAsFactors = FALSE
)

cat("Loaded CHMS metadata:\n")
cat("- Variables:", nrow(variables), "rows\n")
cat("- Variable details:", nrow(variable_details), "rows\n")
```

## Explore available cycles

```{r}
# Extract unique CHMS cycles from metadata
cycles <- sort(unique(unlist(str_split(paste(variables$databaseStart, collapse = ","), ","))))
cycles <- str_trim(cycles[str_detect(cycles, "cycle")])

cat("Available CHMS cycles in sample metadata:\n")
print(cycles)

# Choose first cycle for this example
target_cycle <- cycles[1]
cat("\nGenerating mock data for:", target_cycle, "\n")
```

## Identify raw variables to generate

```{r}
# Get raw variables for target cycle (exclude derived variables)
raw_vars <- get_raw_variables(
  target_cycle,
  variables,
  variable_details,
  include_derived = FALSE
)

cat("Raw variables to generate:", nrow(raw_vars), "\n\n")

# Separate by type
raw_cat <- raw_vars[raw_vars$variableType == "Categorical", ]
raw_con <- raw_vars[raw_vars$variableType == "Continuous", ]

cat("Breakdown:\n")
cat("- Categorical:", nrow(raw_cat), "variables\n")
cat("- Continuous:", nrow(raw_con), "variables\n\n")

cat("Sample variables:\n")
print(head(raw_vars[, c("variable_raw", "variableType")], 10))
```

## Generate categorical variables

```{r}
# Configuration (realistic CHMS sample size)
n_records <- 100  # Use 5000-6000 for realistic CHMS cycle size
set.seed(12345)

# Initialize data frame
df_mock <- data.frame(id = 1:n_records)

# Generate each categorical variable
cat("Generating", nrow(raw_cat), "categorical variables:\n\n")

for (i in 1:nrow(raw_cat)) {
  var_raw <- raw_cat$variable_raw[i]
  cat("Generating:", var_raw, "\n")

  col <- create_cat_var(
    var_raw = var_raw,
    cycle = target_cycle,
    variable_details = variable_details,
    variables = variables,
    length = nrow(df_mock),
    df_mock = df_mock,
    prop_NA = 0.05  # Realistic 5% missingness
  )

  if (!is.null(col)) {
    df_mock <- cbind(df_mock, col)
  }
}

cat("\nCategorical generation complete. Columns:", ncol(df_mock), "\n")
```

## Generate continuous variables

```{r}
# Generate each continuous variable
cat("\nGenerating", nrow(raw_con), "continuous variables:\n\n")

for (i in 1:nrow(raw_con)) {
  var_raw <- raw_con$variable_raw[i]
  cat("Generating:", var_raw, "\n")

  col <- create_con_var(
    var_raw = var_raw,
    cycle = target_cycle,
    variable_details = variable_details,
    variables = variables,
    length = nrow(df_mock),
    df_mock = df_mock,
    distribution = "uniform",
    prop_NA = 0.03  # Lower missingness for physical measures
  )

  if (!is.null(col)) {
    df_mock <- cbind(df_mock, col)
  }
}

cat("\nContinuous generation complete. Columns:", ncol(df_mock), "\n")
```

## Verify results

```{r}
# Show structure
cat("\nMock CHMS data structure:\n")
cat("- Records:", nrow(df_mock), "\n")
cat("- Variables:", ncol(df_mock), "\n\n")

# Display first rows
cat("First 10 rows:\n")
print(head(df_mock, 10))

# Check missing data
cat("\nMissing value counts:\n")
na_counts <- colSums(is.na(df_mock))
if (any(na_counts > 0)) {
  print(na_counts[na_counts > 0])
  cat("\nMissingness rates:\n")
  print(round(na_counts[na_counts > 0] / nrow(df_mock) * 100, 1))
} else {
  cat("No missing values\n")
}
```

## CHMS-specific tips

### Realistic sample sizes

CHMS cycles are smaller than CCHS. Use realistic sizes for testing:

```{r}
# Typical CHMS cycle sizes
chms_cycle_sizes <- data.frame(
  cycle = c("Cycle 1", "Cycle 2", "Cycle 3", "Cycle 4", "Cycle 5"),
  approx_n = c(5600, 6400, 5800, 5800, 5700)
)

cat("Realistic CHMS sample sizes:\n")
print(chms_cycle_sizes)

cat("\nFor testing, generate with realistic size:\n")
cat("df_mock <- data.frame(id = 1:5800)  # Typical CHMS cycle\n")
```

### Physical measurement distributions

CHMS includes biomarker and physical measurements. For continuous variables, you can use realistic distributions:

```{r}
# Example: Generate blood pressure with realistic distribution
# (if available in your metadata)

# Systolic BP: mean ~120, SD ~15 (realistic Canadian adult population)
# Check if blood pressure variable exists in metadata
bp_vars <- raw_con$variable_raw[grepl("bp|blood", raw_con$variable_raw, ignore.case = TRUE)]

if (length(bp_vars) > 0) {
  cat("Blood pressure variables found:\n")
  print(bp_vars)

  cat("\nExample with normal distribution for realistic BP:\n")
  cat('col <- create_con_var(
    var_raw = "SYSTOLIC_BP",
    cycle = target_cycle,
    variable_details = variable_details,
    variables = variables,
    length = 5800,
    df_mock = df_mock,
    distribution = list(type = "normal", mean = 120, sd = 15),
    prop_NA = 0.02  # Low missingness for physical measures
  )
  if (!is.null(col)) df_mock <- cbind(df_mock, col)\n')
} else {
  cat("No blood pressure variables in sample metadata\n")
}
```

### Working with multiple cycles

Test harmonization across CHMS cycles:

```{r}
# Generate for multiple cycles
cycle_list <- cycles[1:min(2, length(cycles))]

all_cycles_data <- lapply(cycle_list, function(cyc) {
  cat("\nGenerating for:", cyc, "\n")

  raw_vars <- get_raw_variables(cyc, variables, variable_details,
                                 include_derived = FALSE)

  df <- data.frame(id = 1:50, cycle = cyc)

  # Generate variables (simplified loop)
  for (i in 1:nrow(raw_vars)) {
    var_raw <- raw_vars$variable_raw[i]
    var_type <- raw_vars$variableType[i]

    if (var_type == "Categorical") {
      col <- create_cat_var(var_raw, cyc, variable_details, variables,
                           length = nrow(df), df_mock = df, prop_NA = 0.05)
    } else {
      col <- create_con_var(var_raw, cyc, variable_details, variables,
                           length = nrow(df), df_mock = df,
                           distribution = "uniform", prop_NA = 0.03)
    }

    if (!is.null(col)) {
      df <- cbind(df, col)
    }
  }

  return(df)
})

# Combine all cycles
combined_data <- bind_rows(all_cycles_data)

cat("\nCombined multi-cycle dataset:\n")
cat("- Total records:", nrow(combined_data), "\n")
cat("- Cycles:", paste(unique(combined_data$cycle), collapse = ", "), "\n")
```

### Testing in RDC environment

MockData can run in StatsCan RDCs with restrictions:

```{r}
# Example: Check if running in restricted environment
is_rdc <- Sys.getenv("STATSCAN_RDC") != ""  # Set this env var in RDC

if (is_rdc) {
  cat("Running in RDC environment\n")
  cat("- Use actual CHMS data for production\n")
  cat("- Use MockData for development/testing only\n")
} else {
  cat("Running outside RDC\n")
  cat("- Use MockData for all development\n")
  cat("- Test harmonization workflows before RDC access\n")
}
```

## Use cases for CHMS mock data

**Development:**
- Build chmsflow harmonization code without RDC access
- Test variable transformations and derivations
- Develop analysis pipelines

**Testing:**
- Unit tests for harmonization functions
- Integration tests for complete workflows
- Edge case testing (extreme values, missing data patterns)

**Training:**
- Onboard new team members
- Practice CHMS data workflows
- Demonstrate harmonization concepts

**Example test:**
```{r}
# Example: Test that harmonized smoking variable has expected categories
harmonize_smoking <- function(raw_smoking) {
  # Simplified harmonization function
  case_when(
    raw_smoking == 1 ~ 1,  # Daily
    raw_smoking == 2 ~ 2,  # Occasional
    raw_smoking == 3 ~ 3,  # Never
    TRUE ~ NA_real_
  )
}

# Generate mock data
df_test <- data.frame(id = 1:100)
col <- create_cat_var(
  var_raw = "smoking_raw",
  cycle = target_cycle,
  variable_details = variable_details,
  variables = variables,
  length = nrow(df_test),
  df_mock = df_test,
  prop_NA = 0
)

if (!is.null(col)) {
  df_test <- cbind(df_test, col)
}

# Apply harmonization (if variable exists)
if ("smoking_raw" %in% names(df_test)) {
  df_test$smoking_harmonized <- harmonize_smoking(df_test$smoking_raw)

  cat("Harmonization test:\n")
  cat("- Input categories:", paste(unique(df_test$smoking_raw), collapse = ", "), "\n")
  cat("- Output categories:", paste(unique(df_test$smoking_harmonized), collapse = ", "), "\n")
}
```

## Troubleshooting

**Issue: Variable not found**
- CHMS variable names may differ from CCHS
- Check metadata for actual variable names in each cycle

**Issue: Unrealistic values**
- Physical measures need realistic distributions (use `distribution = list(type = "normal", ...)`)
- Check ranges in variable_details match real CHMS data

**Issue: Sample size too large**
- CHMS cycles are smaller (~5,000-6,000) than CCHS
- Use realistic sample sizes for memory efficiency

## Next steps

- **Other databases:** Try [CCHS example](cchs-example.html) or [DemPoRT example](demport-example.html)
- **Feature details:** Read [User guide](user-guide.html) for missing data, distributions, etc.
- **Technical depth:** See [Advanced topics](advanced-topics.html) for NA handling internals
