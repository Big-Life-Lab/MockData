---
title: "Create mock data for DemPoRT"
author: "Juan Li"
date: 2025-07-30
format: 
  html:
    toc: true
    html-math-method: katex
    css: styles.css
editor: visual
---

Some resources:

<https://kgoldfeld.github.io/simstudy/>

```{r}
#| warning: false
#| message: false
#| output: false

library(dplyr)       # Data manipulation
library(stringr)     # Working with strings
#library(simstudy)    # Generate simulated data sets: https://cran.r-project.org/web/packages/simstudy/vignettes/simstudy.html

# source helper functions
source("R/create_cat_var.R")
source("R/create_con_var.R")
source("R/util.R")
```

## Read in variable and variable_details sheet

```{r}
# DemPoRT variables
variables <- read.csv("Worksheets/variables_DemPoRT.csv", header = T, check.names=FALSE, na.strings=c("","NA","N/A")) 
# DemPoRT variable details
variable_details <- read.csv("Worksheets/variable_details_DemPoRT.csv", header = T, check.names=FALSE, na.strings=c("","NA","N/A"))  
```

## Get required cycles

```{r}
cycles <- unlist(str_split(paste(variables$databaseStart, collapse = ","), ","))
cycles <- unlist(str_split(cycles, " ")) 
cycles <- str_trim(cycles[str_detect(cycles, "cchs")]) # trim whitespaces
(cycles <- sort(unique(cycles)))

# NOTE: clean cycles
cycles <- sort(unique(str_replace_all(cycles, "cchs_", "cchs")))
cycles
```

## Get variable names of each type

```{r}
# check if variables and variable_details sheets match
var1 <- variables$variable
var2 <- unique(variable_details$variable)

print("In variables, not in variable_details:")
var1[!(var1 %in% var2)]
print("In variable_details, not in variables:")
var2[!(var2 %in% var1)]
```

```{r}
# --- derived variables ---
var_derived <- unique(c(variables[str_detect(variables$variableStart, "DerivedVar::") |
                          str_detect(variables$variable, "_der"), "variable"],
                        variable_details[str_detect(variable_details$variableStart, "DerivedVar::") |
                          str_detect(variable_details$variable, "_der"), "variable"]))
print("--- Derived variables: ---")
print(var_derived)

# --- original variables ---
# categorical variables
var_cat <- unique(c(variables[variables$variableType == "Categorical", "variable"],
                    variable_details[variable_details$variableType == "Categorical", "variable"]))
var_cat <- var_cat[!(var_cat %in% var_derived)] # remove derived variable
print("--- Categorical variables: ---")
print(var_cat)

# continuous variables
var_con <- unique(c(variables[variables$variableType == "Continuous", "variable"],
                    variable_details[variable_details$variableType == "Continuous", "variable"]))
var_con <- var_con[!(var_con %in% var_derived)] # remove derived variable
print("--- Continuous variables: ---")
print(var_con)

# check
nrow(variables) == length(var_derived) + length(var_cat) + length(var_con)
```

## 1. Generate mock data of original variables

### Categorical variables

```{r}
length <- 5

df_cat <- data.frame()
for (cycle in cycles) {
  df_i <- data.frame(cycle = rep(cycle, length))
  for (var in var_cat) {
    col <- create_cat_var(var, cycle, variable_details, length, df_i)
    df_i <- bind_cols(df_i, col)
  }
  df_cat <- bind_rows(df_cat, df_i)
}
```

### Continuous variables

```{r}
df_con <- data.frame()
for (cycle in cycles) {
  df_i <- data.frame(cycle = rep(cycle, length))
  for (var in var_con) {
    # catch the warning message
    tryCatch({col <- create_con_var(var, cycle, variable_details, length, df_i, type = "uniform")},
            warning = function(w) print(paste0(var, " in ", cycle)))
    
    # but need to run it again, otherwise, col will be the same value as in the last iteration
    col <- create_con_var(var, cycle, variable_details, length, df_i, type = "uniform")
    df_i <- bind_cols(df_i, col)
  }
  df_con <- bind_rows(df_con, df_i)
}
```

### combine

```{r}
df <- bind_cols(df_cat, df_con[, !(names(df_con) %in% names(df_cat))])
write.csv(df, paste0("Data/DemPoRT/mock_all_cycles.csv"), row.names = F)
```

### save for each cycle

```{r}
for (cycle in cycles) {
  dfi <- df %>% filter(cycle == cycle)
  nNA <- colSums(is.na(dfi))
  dfi[, nNA == 0]

  write.csv(dfi, paste0("Data/DemPoRT/mock_", cycle, ".csv"), row.names = F)
}
```

# 2. Genarate outcome data

```{r}

```

```{r}

```