---
title: "Excample of generating mock data using PHIAT-YLL files based on variable and variable-details sheets"
author: "Juan Li"
date: 2025-07-02
format: 
  html:
    toc: true
    html-math-method: katex
    css: styles.css
editor: visual
---

Some resources:

<https://kgoldfeld.github.io/simstudy/>

```{r}
#| warning: false
#| message: false
#| output: false

library(dplyr)       # Data manipulation
library(stringr)     # Working with strings
#library(simstudy)    # Generate simulated data sets: https://cran.r-project.org/web/packages/simstudy/vignettes/simstudy.html

# source helper functions
source("R/create_cat_var.R")
source("R/create_con_var.R")
source("R/util.R")
```

## Read in variable and variable_details sheet

```{r}
# PHIAT-YLL variables
variables <- read.csv("Worksheets/phiatyll_variables.csv", header = T, check.names=FALSE, na.strings=c("","NA","N/A")) # PHIAT-YLL variables
# CCHS variable details
variable_details_c <- read.csv("Worksheets/cchsflow-variable-details.csv", header = T, check.names=FALSE, na.strings=c("","NA","N/A"))  
# additional PHIAT-YLL variable details
variable_details_p <- read.csv("Worksheets/phiatyll_variables_details.csv", header = T, check.names=FALSE, na.strings=c("","NA","N/A")) 

variable_details <- bind_rows(variable_details_c, variable_details_p) %>% 
  filter(variable %in% variables$variable)
```

## Get required cycles

```{r}
cycles <- sort(unique(unlist(str_split(paste(variables$databaseStart, collapse = ","), ","))))
(cycles <- str_trim(cycles[str_detect(cycles, "cchs")]))
```

## Get variable names of each type

```{r}
# --- derived variables ---
var_derived <- unique(variable_details[str_detect(variable_details$variableStart, "DerivedVar::") |
  str_detect(variable_details$variable, "_der"), "variable"])
print("--- Derived variables: ---")
print(var_derived)

# --- original variables ---
# categorical variables
var_cat <- unique(variables[variables$variableType == "Categorical", "variable"])
var_cat <- var_cat[!(var_cat %in% var_derived)] # remove derived variable
print("--- Categorical variables: ---")
print(var_cat)

# continuous variables
var_con <- unique(variables[variables$variableType == "Continuous", "variable"])
var_con <- var_con[!(var_con %in% var_derived)] # remove derived variable
print("--- Continuous variables: ---")
print(var_con)

# check
nrow(variables) == length(var_derived) + length(var_cat) + length(var_con)
```

## 1. Generate mock data of original variables

### Categorical variables

```{r}
length <- 5

df_cat <- data.frame()
for (cycle in cycles) {
  df_i <- data.frame(cycle = rep(cycle, length))
  for (var in var_cat) {
    col <- create_cat_var(var, cycle, variable_details, length)
    df_i <- bind_cols(df_i, col)
  }
  df_cat <- bind_rows(df_cat, df_i)
}
```

### Continuous variables

```{r}
df_con <- data.frame()
for (cycle in cycles) {
  df_i <- data.frame(cycle = rep(cycle, length))
  for (var in var_con) {
    col <- create_con_var(var, cycle, variable_details, length, type = "uniform")
    df_i <- bind_cols(df_i, col)
  }
  df_con <- bind_rows(df_con, df_i)
}
```

### combine

```{r}
df <- bind_cols(df_cat, df_con)
```

## 2. Generate mock data of derived variables

```{r}

```

## 3. Optional: further manipulate data

### Add missing data

```{r}

```

### Add spoiled data

```{r}

```

## 4. Add info from Table 1

```{r}

```

## 5. Add info from correlation matrix

```{r}

```

```{r}

```